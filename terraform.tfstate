Step 1: Project Directory Structure
Sabse pehle, project ke liye ek structure banaiye:

css
Copy code
terraform-project/
├── main.tf
├── variables.tf
├── outputs.tf
├── dev.tfvars
├── staging.tfvars
├── prod.tfvars
├── backend.tf
Explanation:


1. Define Resources (main.tf):
hcl
Copy code
provider "aws" {
  region = var.region
}

resource "aws_instance" "app_server" {
  ami           = var.ami_id
  instance_type = var.instance_type

  tags = {
    Name = "App-Server-${var.environment}"
  }
}



2. Define Variables (variables.tf):
hcl
Copy code
variable "environment" {
  description = "Environment name (e.g., dev, staging, prod)"
  type        = string
}

variable "region" {
  description = "AWS Region to deploy resources"
  type        = string
}

variable "ami_id" {
  description = "Amazon Machine Image ID"
  type        = string
}

variable "instance_type" {
  description = "EC2 Instance Type"
  type        = string
}




3. Define Outputs (outputs.tf):
hcl
Copy code
output "instance_id" {
  description = "ID of the EC2 instance"
  value       = aws_instance.app_server.id
}

output "instance_public_ip" {
  description = "Public IP of the EC2 instance"
  value       = aws_instance.app_server.public_ip
}




4. Define Remote Backend (backend.tf):
Agar aapke setup me remote backend use ho raha hai (e.g., S3), to ye configuration add karein:

hcl
Copy code
terraform {
  backend "s3" {
    bucket         = "terraform-state-${var.environment}"
    key            = "${var.environment}/terraform.tfstate"
    region         = "us-east-1"
    encrypt        = true
  }
}




Step 3: Create .tfvars Files for Environments
Har environment ke liye unique values assign karein.

1. dev.tfvars:
hcl
Copy code
environment   = "dev"
region        = "us-west-1"
ami_id        = "ami-0abcdef1234567890"
instance_type = "t2.micro"




2. staging.tfvars:
hcl
Copy code
environment   = "staging"
region        = "us-east-1"
ami_id        = "ami-0abcdef1234567890"
instance_type = "t3.micro"




3. prod.tfvars:
hcl
Copy code
environment   = "prod"
region        = "us-east-2"
ami_id        = "ami-0abcdef1234567890"
instance_type = "t3.medium"


Step 4: Initialize and Apply Terraform Configuration
1. Initialize Backend:
bash
Copy code
terraform init


2. Plan and Apply for Specific Environment:
For dev environment:

bash
Copy code
terraform plan -var-file="dev.tfvars"
terraform apply -var-file="dev.tfvars"
For staging environment:

bash
Copy code
terraform plan -var-file="staging.tfvars"
terraform apply -var-file="staging.tfvars"
For prod environment:

bash
Copy code
terraform plan -var-file="prod.tfvars"
terraform apply -var-file="prod.tfvars"
Step 5: Cleanup and Manage States
Terraform state file har environment ke liye alag hona chahiye. Agar remote backend use nahi kar rahe hain, to manually states ko segregate karein:
bash
Copy code
terraform apply -var-file="dev.tfvars" -state="dev.tfstate"
terraform apply -var-file="staging.tfvars" -state="staging.tfstate"
